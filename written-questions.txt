Written Questions

Q1. Run the web crawler using the configurations located at src/main/config/written_question_1a.json and
    src/main/config/written_question_1b.json. The only difference between these configurations is that one always uses
    the sequential crawler and the other always uses the parallel crawler. Inspect the profile output in
    profileData.txt.

    If you are using a multi-processor computer, you should notice that SequentialWebCrawler#crawl and
    ParallelWebCrawler#crawl took about the same amount of time, but PageParserImpl#parse took much longer when run with
    the ParallelWebCrawler.

    Why did the parser take more time when run with ParallelWebCrawler?
    - There are multiple/more page run in parallel Web Crawler than in Sequential Web Crawler.

Q2. Your manager ran your crawler on her old personal computer, using the configurations from Q1, and she notices that
    the sequential crawler actually outperforms the parallel crawler. She would like to know why.

    (a) Suggest one reason why the sequential web crawler was able to read more web pages than the parallel crawler.
        (Hint: Try setting "parallelism" to 1 in the JSON configs to simulate your manager's computer.)
     - her old personal computer makes parallel web crawler performs the same as sequential by having one processor/core where
     it does not support parallelism/multithreading.

    (b) Suggest one scenario in which the parallel web crawler will almost certainly perform better than the sequential
        crawler. Why will it perform better?
    - when the computer have multiprocessor/multicore and supports the multithreading which task can distribute to many subtasks
    to run in parallel.

Q3. Analyze your method profiler through the lens of Aspect Oriented Programming, by answering the following questions:

    (a) What cross-cutting concern is being addressed by the com.udacity.webcrawler.profiler.Profiler class?
    - Performance profiling

    (b) What are the join points of the Profiler in the web crawler program?
    - ProfilingMethodInterceptor class and wrap() method

Q4. Identify three (3) different design patterns used in this project, and explain which interfaces, classes, and/or
    libraries use or implement those design patterns.

    For each pattern, name one thing about the pattern that you LIKED, and one thing you DISLIKED. If you did not like
    anything, you can name two things you disliked.

    1. Dependency Injection: used in ProfilerImpl class, ParallelWebCrawler class, PageParserFactoryImpl class
            Like: It makes testing easier.
            Dislike: It is harder to debug.

    2. Builder: used in CrawlResult class and CrawlerConfiguration class
            Like: improve object creation when instantiated with lots of constructor parameters.
            Dislike: needs to write more code, extra Builder class

    3. Abstract Factory: used in PageParserFactory interface and PageParserFactoryImpl class
            Like: creation of several related objects with an interface.
            Dislike: the code is more difficult to read